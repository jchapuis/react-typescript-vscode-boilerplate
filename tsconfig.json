{
    "compilerOptions": {
        "target": "es5", // Emit directly to ES5 Javascript, supported in all browsers (hence no need of Babel)
        "module": "es2015", // ES2015 module format, the most standard one, supported by webpack
        "moduleResolution": "node", // This allows Typescript to load type declarations supplied alongside npm packages
        "baseUrl": "app", // Allows us to use absolute-style imports for local modules
        "noImplicitAny": false, // tells tsc not to warn us if any variables are inferred as having a type of any. It’s actually probably good practice to set this to true, but it does mean you’ll potentially have to be more liberal with type annotations.
        "sourceMap": true, // tells tsc to output a source map, which enables easier debugging from the browser as it can tell you where in the original .ts source file an error occurred, rather than just in the compiled .js.
        "isolatedModules": true,
        "preserveConstEnums": true,
        "jsx": "react", // Compile directly jsx to React.createElement function calls (since we are not going through Babel)
        "lib": [
            "dom",
            "es5",
            "scripthost",
            "es2015.promise" // Default libraries for building in ES5, plus the additional promise library required by RxJs
        ]
    },
    "exclude": [
        "node_modules" // We exclude node_modules as we don’t want tsc to try and compile anything it finds in there – it’s alternatively possible to explicitly include files for compilation
    ]
}